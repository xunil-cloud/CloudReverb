# Some parts are taken from https://github.com/sudara/pamplejuce/blob/main/.github/workflows/build_and_test.yml
name: Build

on: [push, pull_request, workflow_dispatch]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            extra-config-flags:
            pluginval-binary: ./pluginval
          - name: macOS
            os: macos-14
            extra-config-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
          - name: Windows
            os: windows-latest
            extra-config-flags:
            pluginval-binary: ./pluginval.exe
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: install packages
      run: sudo apt-get install libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libasound2-dev libfreetype-dev
      if: matrix.os == 'ubuntu-22.04'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{matrix.extra-config-flags}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -j$(nproc --all)

    - name: Set additional env vars for next steps
      run: |
        ARTIFACTS_PATH=${{ runner.worksapce }}/build/CloudReverb_artefacts/${{ env.BUILD_TYPE }}
        echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
        echo "VST3_PATH=$ARTIFACTS_PATH/VST3/CloudReverb.vst3" >> $GITHUB_ENV

    - name: Run Pluginval
      run: |
        curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.4/pluginval_${{ matrix.name }}.zip"
        7z x pluginval_${{ matrix.name }}.zip
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "${{ env.VST3_PATH }}"
    # - name: Test
    #   working-directory: ${{runner.workspace}}/build
    #   shell: bash
      # run: ctest -C $BUILD_TYPE

    - name: Archive all artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CloudReverb-${{github.ref_name}}-${{matrix.name}}-x86_64
        path: |
          ${{runner.workspace}}/build/CloudReverb_artefacts/${{env.BUILD_TYPE}}
          !${{runner.workspace}}/build/CloudReverb_artefacts/${{env.BUILD_TYPE}}/*CloudReverb_SharedCode*
  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Zip files
        shell: bash
        run: for dir in CloudReverb-*/; do zip -v -r "${dir%/}.zip" "$dir"; done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # prerelease: true
          files: |
            CloudReverb-*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
